# -*- coding: utf-8 -*-
"""Exploratory_Data_Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c5ICWZ0CdSHGnrDpEzoZZbQGDr9LTO9c

## Exploratory Data Analysis (Keşifsel Veri Analizi)

İstatistikte, keşifsel veri analizi, genellikle istatistiksel grafikler ve diğer veri görselleştirme yöntemlerini kullanarak temel özelliklerini özetlemek için veri kümelerini analiz etme yaklaşımıdır.

"2021-22 NBA oyuncularının oyun başına istatistikleri" veri setinden çekilmiştir.

 https://www.basketball-reference.com/leagues/NBA_2022_per_game.html
"""

import pandas as pd
# HTML sayfasındaki verileri çekmek için aşağıdaki adımlar incelenir.
url = 'https://www.basketball-reference.com/leagues/NBA_2021_per_game.html'
html = pd.read_html(url, header = 0)
df2021 = html[0]

# Veri temizleme işlemi 
raw = df2021.drop(df2021[df2021.Age == 'Age'].index)
raw

"""**Data Cleaning (Veri Temizleme)**

Data dimension (veri boyutu)
"""

raw.shape
# verinin kaç satır kaç sütundan oluştuğunu görmemize yarar.

"""Dataframe contents (Veri çervesinin içeriği)"""

raw.head()

"""Kayıp verilerin kontrolü 

"""

raw.isnull().sum()

"""Kayıp verilerin 0 ile değiştirilmesi"""

df = raw.fillna(0)

df.isnull().sum()

df = df.drop(['Rk'], axis=1) 
# kayıp verileri temizledikten sonra "Rk = Rank" sıra numaraları da değiştirilir.
df

"""CSV dosyanına yazma  işlemi 

"""

df.to_csv('nba2021.csv', index=False)

! ls # dosyayı listelemeyi sağlar.

! cat nba2021.csv # dosyanın içeriğini görüntülemeyi sağlar.

"""**Keşifsel Veri Analizi**

Veri Okuma
"""

df = pd.read_csv('nba2021.csv') # csv dosyasını okumayı sağlar. 
df

"""Eğer tüm gözlem birimlerini bir arada görüntülemek istiyorsak;"""

pd.set_option('display.max_rows', df.shape[0]+1)
df

"""Verilerin bu şekilde dataframe'de saklanması işlemleri gerçekleştirmede güçlük yaratacaktır bu nedenle varsasyılan moda geri döndürmemiz gerekir. """

pd.set_option('display.max_rows', 10)
df

"""Veri çervesinin her bir sütununun veri tipleri hakkında genel bilgi sahibi olmak için aşağıdaki komut kullanılır. """

df.dtypes

"""Veri çerçevesinde belirtilmiş olan veri tipini görüntülemeyi sağlar. """

df.select_dtypes(include=['number']) # veri tipi sayısal olan verilerin görülmesi

df.select_dtypes(include=['object']) # nitel verilerin görüntülenmesini sağlar. 
# Bu veri seti için oyuncuların isimleri, pozisyonları ve takım isimleridir.

"""## Sorular

**Koşullu Seçim**

Keşifsel veri analizini uygularken, analiz veya karşılaştırma yapmak için veri alt kümelerini seçebilmek önemlidir.

**Maç başına en çok puanı hangi oyuncu almıştır?**
"""

df[df.PTS == df.PTS.max()] # PTS (Points Per Game) olarak kullanılmıştır.

df.PTS # Tüm oyuncuların maç başına puanlarını listelenmiştir. 
df['PTS'] # yukarıdaki komutun bir diğer şekliyle ifade edilmiş halidir.

df.PTS.max() # .max() ile verilerden en büyüğünü görüntüler.
df['PTS'].max() # yukarıdaki komutla aynı anlama gelir.

"""Maç başına en yüksek puanı alan oyuncu hangi takımdandır?"""

PlayerMaxPoints = df[df.PTS == df.PTS.max()]
PlayerMaxPoints.Tm # Tm (Team) ile gösterilen takım anlamında kullanıldı.

"""Maç başına en yüksek puanı alan oyuncu hangi mevkide oynuyor?"""

PlayerMaxPoints.Pos # Pos (Position) pozisyonun kısaltımış halidir.

"""Maç başına en yüksek puanı alan oyuncu sezonda kaç maçta oynamıştır?"""

PlayerMaxPoints.G # Game (Maç ya da oyun) için G kısaltması kullanılmıştır.

"""**Hangi oyuncular maç başına 20 puandan daha fazla puana sahiptir?**"""

df[df.PTS > 20]

"""**Hangi oyuncu maç başına en yüksek 3 sayılık saha atışına (3P) sahiptir?**"""

df[df['3P'] == df['3P'].max()]

"""**Maç başına en yüksek asist (AST) hangi oyuncuya aittir?**

Basketbolda, bir takım arkadaşına topu pas veren bir oyuncuya bir asist atfedilir, bu da baskette "asist" yaptıkları anlamına gelir.
"""

df[df['AST'] == df['AST'].max()]

"""**Yaşı en küçük olan oyuncunun maç başına aldığı puan en düşük kaçtır?**

(Birden fazla 19 yaşında olan kişi vardır.)
"""

YasıEnKucukOyuncu = df[df.Age == df.Age.min()]
YasıEnKucukOyuncu.PTS.min()
# yaşı en küçük oyuncunun maç başına aldığı en düşük puan.
# 19 yaşında olan 15 kişi vardır. (15 rows x 29 columns) bilgisinden elde edilir.

df[df['Age'] == df['Age'].min()] # yukarıdaki komutla aynı amaca çalışır.

"""**GroupBy() fonkisyonu**

**Los Angeles Lakers'ta oynayan hangi oyuncu en yüksek puana (PTS = maç başına puan) sahiptir?**
"""

LAL = df.groupby('Tm').get_group('LAL')
# LAL adında bir değişken oluşturulur grupby fonkisyonundan yararlanılır.

LAL[LAL.PTS == LAL.PTS.max()] 
# LAL olarak kısaltılan takımından maç başına en yüksek puana sahip oyuncu seçilir.

"""**5 pozisyondan hangisi en çok puanı almıştır?**

Öncelikle oyuncuları pozisyonlarına göre gruplandırırız. 
"""

df.groupby('Pos').PTS.describe()

"""Şimdi sadece 5 geleneksel pozisyon görüntülenir. (birleşik pozisyonları içeren satırlar analizden çıkarılacaktır).

Pandas isin() yöntemi, veri çerçevelerini filtrelemek için kullanılır. isin() yöntemi, belirli bir sütunda belirli bir (veya çoklu) değere sahip satırların seçilmesine olanak tanır.
"""

positions = ['C', 'PF', 'SF', 'PG', 'SG']
POS = df[df['Pos'].isin(positions)]
POS

"""Şimdi tanımlayıcı istatistiklere genel olarak bakılacaktır. """

POS.groupby('Pos').PTS.describe()

"""**Histogram**

Histogram, bir dizi sürekli verinin altında yatan frekans dağılımını (şeklini) keşfetmenizi ve göstermenizi sağlayan bir grafiktir. Bu, verilerin temel dağılımı (örn. normal dağılım), aykırı değerler, çarpıklık vb. için incelenmesine olanak tanır.
"""

PTS = df[['Pos','PTS']]

positions = ['C', 'PF', 'SF', 'PG', 'SG']
PTS = PTS[ PTS['Pos'].isin(positions)]

PTS

"""**Pandas ile Görselleştirme**"""

PTS['PTS'].hist(by=PTS['Pos'])

PTS['PTS'].hist(by = PTS['Pos'], layout = (1,5)) 
## layout yöntemi histogramın belirlenen satır ve sütun için yerini belirliyor.

PTS['PTS'].hist(by = PTS['Pos'], layout = (1,5), figsize = (16,2))
## figsize ile görselin satır ve sütun genişliği açısından büyüklüğü belirlenir.

"""**Seaborn ile Veri Görselleştirme**"""

import seaborn as sns
import matplotlib.pyplot as plt 
import pandas.util.testing as tm
g = sns.FacetGrid(PTS, col ="Pos")
g.map(plt.hist, "PTS");

"""**Kutu Grafiği (Box Plots)**

Tanımlayıcı istatistiklerde, bir kutu grafiği, açıklayıcı veri analizinde sıklıkla kullanılan bir grafik türüdür. Kutu grafikleri, çeyrekleri(yüzdelikleri) ve ortalamaları görüntüleyerek sayısal verilerin ve çarpıklığın dağılımını görsel olarak gösterir.

Pozisyona göre gruplandırılmış puanların (PTS) kutu grafiği
"""

PTS.boxplot(column='PTS') # birleştirilmiş kutu grafiğini gösterir.
PTS.boxplot(column='PTS', by = 'Pos') # ayrı ayrı kutu grafiğini görüntüler.

"""**Seaborn data visualization**"""

import seaborn as sns

sns.boxplot(x = 'Pos', y = 'PTS', data = PTS)

sns.boxplot(x ='Pos', y = 'PTS', data = PTS)
sns.stripplot(x = 'Pos', y = 'PTS', data = PTS,
              jitter=True,
              marker='o',
              alpha=0.8,
              color="aqua")

"""**Heat Map (Isı Haritası)**

Korelasyon matrisi hesaplanır. 

Korelasyon, olasılık kuramı ve istatistikte iki rassal değişken arasındaki doğrusal ilişkinin yönünü ve gücünü belirtir. Genel istatistiksel kullanımda korelasyon, bağımsızlık durumundan ne kadar uzaklaşıldığını gösterir. Farklı durumlar için farklı korelasyon katsayıları geliştirilmiştir. -1 ile +1 arasında değer alır.
"""

corr = df.corr()
corr

sns.heatmap(corr)

import seaborn as sns
import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize = (7,5))
sns.heatmap(corr, square = True)

"""Isı Haritasının yarısını çapraz olarak gizleyebiliriz. Buna da çapraz korelasyon matrisi denir. (Diagonal Correlation Matrix) 

"""

import numpy as np
import seaborn as sns 

mask = np.zeros_like(corr)
mask[np.triu_indices_from(mask) ] = True
with sns.axes_style("white"): # maskelenen kısımı beyaza boyandı.
  f, ax = plt.subplots(figsize=(7, 5))
  ax = sns.heatmap(corr, mask = mask, vmax=1, square = True)

"""Scatter Plot (Saçılım Grafiği)

Dağılım grafiklerinin birincil kullanımları, iki sayısal değişken arasındaki ilişkileri gözlemlemek ve göstermektir. Bir dağılım grafiğindeki noktalar, yalnızca tek tek veri noktalarının değerlerini bildirmekle kalmaz, aynı zamanda veriler bir bütün olarak alındığında kalıpları da bildirir.
"""

df

df.select_dtypes(include = ['number'])

"""Dizin numarasına göre ilk 5 sütunu seçelim. """

number = df.select_dtypes(include = ['number'])

number.iloc[:,:5] # .iloc[] komutu pozisyona göre seçim için tamamen tamsayı-konuma dayalı indekslemeyi sağlar.

"""Belirtilen 5 sütunu seçme işlemi 

"""

selections = ['Age', 'G', 'STL', 'BLK', 'AST', 'PTS']
df5 = df[selections]
df5

"""Oluşturduğumuz 5 sütun için hepsini birlikte görüntüleyebileceğimiz saçılım grafiklerini oluşturalım."""

import seaborn as sns

g = sns.PairGrid(df5)
g.map(plt.scatter);

"""Tüm sütunları birlikte görüntülemek analiz yapmayı zorlaştıracaktır. Ancak yine de görüntülemekte fayda vardır. """

import seaborn as sns

g = sns.PairGrid(number)
g.map(plt.scatter)